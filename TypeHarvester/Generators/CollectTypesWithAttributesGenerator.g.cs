namespace TypeHarvester.Generators;

using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;

internal partial class CollectTypesWithAttributesGenerator
{
    private string Generate(Dictionary<string, object> templateArguments)
    {
        var sb = new StringBuilder();


        var Types = (System.Collections.Generic.Dictionary<string, string[]>)templateArguments["Types"];
        var Namespace = (string)templateArguments["Namespace"];
        var Partial = (bool)templateArguments["Partial"];
        var partialLex = Partial ? "partial " : string.Empty;
        sb.AppendLine("//------------------------------------------------------------------------------");
        sb.AppendLine("// <auto-generated>");
        sb.AppendLine("//     Этот код был создан автоматически.");
        sb.AppendLine("//     Внесение изменений в этот файл может привести к неправильной работе");
        sb.AppendLine("//     и будет потеряно при повторной генерации кода.");
        sb.AppendLine("// </auto-generated>");
        sb.AppendLine("//------------------------------------------------------------------------------");
        sb.AppendLine("");
        if (Namespace != null) {
        sb.AppendLine($"namespace {Namespace};");
        }
        sb.AppendLine("");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine("using System.Linq;");
        sb.AppendLine("");
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// Предоставляет методы для получения всех типов, помеченных выбранными атрибутами");
        sb.AppendLine("/// </summary>");
        sb.AppendLine($"internal static {partialLex}class TypesByAttributes");
        sb.AppendLine("{");
        sb.AppendLine("    private const string ExceptionText = @\"Атрибут {0} не был зарегистрирован как допустимый.");
        sb.AppendLine("Чтобы исправить это создайте файл codegen.config.json в корне проекта и запишите туда следующее:");
        sb.AppendLine("{{");
        sb.AppendLine("  \"\"Attributes\"\": [");
        sb.AppendLine("    \"\"{0}\"\"");
        sb.AppendLine("  ]");
        sb.AppendLine("}}");
        sb.AppendLine("А так же подключите этот файл в проект следующим образом:");
        sb.AppendLine("<ItemGroup>");
        sb.AppendLine("	<ProjectReference Include=\"\"MyAnalyzers\"\" Version=\"\"latest\"\" />");
        sb.AppendLine("	<AdditionalFiles Include=\"\"codegen.config.json\"\" />");
        sb.AppendLine("</ItemGroup>\";");
        sb.AppendLine("");
        sb.AppendLine("    private static readonly Dictionary<Type,Type[]> TypesCache = new Dictionary<Type,Type[]>");
        sb.AppendLine("    {");
        foreach (var pair in Types) {
        sb.AppendLine($"        {{ typeof({pair.Key}), new Type[]");
        sb.AppendLine("            {");
        foreach (var type in pair.Value) {
        sb.AppendLine($"                typeof({type}),");
        }
        sb.AppendLine("            }");
        sb.AppendLine("        },");
        }
        sb.AppendLine("    };");
        sb.AppendLine("");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Возвращает все типы, помеченные указанным атрибутом.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    /// <typeparam name=\"TAttribute\">Тип атрибута</typeparam>");
        sb.AppendLine($"    internal static {partialLex}IEnumerable<Type> Get<TAttribute>()");
        sb.AppendLine("    {");
        sb.AppendLine("        foreach (var type in GetInternal(typeof(TAttribute)))");
        sb.AppendLine("            yield return type;");
        sb.AppendLine("    }");
        sb.AppendLine("    ");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Возвращает все типы, помеченные указанными атрибутами.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    /// <typeparam name=\"TAttribute1\">Тип атрибута 1</typeparam>");
        sb.AppendLine("    /// <typeparam name=\"TAttribute2\">Тип атрибута 2</typeparam>");
        sb.AppendLine($"    internal static {partialLex}IEnumerable<Type> Get<TAttribute1, TAttribute2>()");
        sb.AppendLine("    {");
        sb.AppendLine("        foreach (var type in Get(typeof(TAttribute1), typeof(TAttribute2)))");
        sb.AppendLine("            yield return type;");
        sb.AppendLine("    }");
        sb.AppendLine("    ");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Возвращает все типы, помеченные указанными атрибутами.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    /// <typeparam name=\"TAttribute1\">Тип атрибута 1</typeparam>");
        sb.AppendLine("    /// <typeparam name=\"TAttribute2\">Тип атрибута 2</typeparam>");
        sb.AppendLine("    /// <typeparam name=\"TAttribute3\">Тип атрибута 3</typeparam>");
        sb.AppendLine($"    internal static {partialLex}IEnumerable<Type> Get<TAttribute1, TAttribute2, TAttribute3>()");
        sb.AppendLine("    {");
        sb.AppendLine("        foreach (var type in Get(typeof(TAttribute1), typeof(TAttribute2), typeof(TAttribute3)))");
        sb.AppendLine("            yield return type;");
        sb.AppendLine("    }");
        sb.AppendLine("    ");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// Возвращает все типы, помеченные указанными атрибутами.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    /// <param name=\"attributeTypes\">Типы атрибутов</param>");
        sb.AppendLine($"    internal static {partialLex}IEnumerable<Type> Get(params Type[] attributeTypes)");
        sb.AppendLine("    {");
        sb.AppendLine("        foreach (var type in attributeTypes.SelectMany(t=> GetInternal(t)).Distinct())");
        sb.AppendLine("            yield return type;");
        sb.AppendLine("    }");
        sb.AppendLine("");
        sb.AppendLine("    private static IEnumerable<Type> GetInternal(Type attributeType)");
        sb.AppendLine("    {");
        sb.AppendLine("        foreach (var type in TypesCache.TryGetValue(attributeType, out var types)");
        sb.AppendLine("                     ? types");
        sb.AppendLine("                     : throw new Exception(string.Format(ExceptionText, attributeType.FullName)))");
        sb.AppendLine("            yield return type;");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }
}
